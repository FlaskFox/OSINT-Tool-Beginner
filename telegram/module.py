from telethon import TelegramClient, events
from telethon.tl.types import ChannelParticipantsBots, ChannelParticipantsAdmins
import asyncio, random, time

from core.colors import pink, reset

class Module:
	def __init__(self, session_name='', api_id='', api_hash=''):
		self.session_name = session_name
		self.api_id = api_id
		self.api_hash = api_hash
		self.client = None
		self.my_id = None
		self.spammer_active = {}

	def module_start(self):
		self.client = TelegramClient(self.session_name, self.api_id, self.api_hash)
		print(f"{pink}[+] –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω{reset}")

		@self.client.on(events.NewMessage(pattern=r"\.start"))
		async def start_handler(event):
			await event.client.send_message(event.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–≤–µ–¥–∏—Ç–µ /commands —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")
		
		@self.client.on(events.NewMessage(pattern=r'\.commands'))
		async def commands_handler(event):
			commands = """
üåò –í—Å–µ –∫–æ–º–∞–Ω–¥—ã üåò

‚ñ™Ô∏è .start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ 
‚ñ™Ô∏è .myinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ
‚ñ™Ô∏è .chatinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
‚ñ™Ô∏è .spammer - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–∞–º –∞—Ç–∞–∫—É –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚ñ™Ô∏è .module - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å

			"""
			await event.client.send_message(event.chat.id, commands)

		@self.client.on(events.NewMessage(pattern=r'\.myinfo'))
		async def my_info_handler(event):
			me = await event.client.get_me()
			photo = await event.client.get_profile_photos(me.id)
			total_photos = len(photo)
			if me.photo:
				await event.reply(file=photo[0])
			me_info = f"""
‚îå üÜî ID: {me.id}
‚îú üìß Username: {me.username if me.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
‚îú üë§ –ò–º—è: {me.first_name if me.first_name else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
‚îú üë§ –§–∞–º–∏–ª–∏—è: {me.last_name if me.last_name else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
‚îú ü§ñ –ë–æ—Ç: {"–±–æ—Ç" if me.bot else "–Ω–µ –±–æ—Ç"}
‚îú üëë –ü—Ä–µ–º–∏—É–º: {"–ø—Ä–µ–º–∏—É–º" if me.premium else "–Ω–µ –ø—Ä–µ–º–∏—É–º"}
‚îú üà≥ –Ø–∑—ã–∫: {me.lang_code if me.lang_code else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
‚îú ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {"–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if me.verified else "–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"}
‚îú ‚ùáÔ∏è C—Ç–∞—Ç—É—Å: {"–æ–Ω–ª–∞–π–Ω" if me.status else "–æ—Ñ—Ñ–ª–∞–π–Ω"}
‚îú üñº –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {total_photos}
‚îî üîó –°—Å—ã–ª–∫–∞: {'https://t.me/' + me.username if me.username else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
			"""

			await event.reply(me_info)

		@self.client.on(events.NewMessage(pattern=r'\.chatinfo'))
		async def chat_info_handler(event):
			chat = await event.get_chat()
			participants = await event.client.get_participants(chat.id)
			admins = await event.client.get_participants(chat.id, filter=ChannelParticipantsAdmins)
			bots = await event.client.get_participants(chat.id, filter=ChannelParticipantsBots)

			chat_info = f"""
–û –≥—Ä—É–ø–ø–µ:

‚îå üÜî ID: {chat.id}
‚îú üë• Username: {chat.username if chat.username else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚îú üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}
‚îú üëë –ê–¥–º–∏–Ω–æ–≤: {len(admins)}
‚îú ü§ñ –ë–æ—Ç–æ–≤: {len(bots)}
‚îî üîó –°—Å—ã–ª–∫–∞: {'https://t.me/' + chat.username if chat.username else '–Ω–µ—Ç'}
			"""

			await event.reply(chat_info)

		@self.client.on(events.NewMessage(pattern=r'\.spammer (.*)'))
		async def spammer_handler(event):
			if event.sender_id == self.my_id:
				chat_id = event.chat_id
				text_to_spam = event.pattern_match.group(1)
				if not self.spammer_active.get(chat_id, False):
					self.spammer_active[chat_id] = True
					await self.client.send_message(chat_id, '‚ö°Ô∏è –°–ø–∞–º–µ—Ä –∑–∞–ø—É—â–µ–Ω ‚ö°Ô∏è', parse_mode='html')
					while self.spammer_active[chat_id]:
						await self.client.send_message(chat_id, text_to_spam)
						await asyncio.sleep(0.1)
				else:
					await event.reply("–°–ø–∞–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")

		@self.client.on(events.NewMessage(pattern=r'\.spammer_stop'))
		async def spammer_stop_handler(event):
			if event.sender_id == self.my_id:
				chat_id = event.chat_id
				if self.spammer_active.get(chat_id, False):
					self.spammer_active[chat_id] = False
					await self.client.send_message(chat_id, '‚ö°Ô∏è –°–ø–∞–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚ö°Ô∏è')
				else:
					await event.reply("–°–ø–∞–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
			else:
				await event.reply("‚ö°Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é! ‚ö°Ô∏è")

		start_module = False
		@self.client.on(events.NewMessage(pattern=r'\.module'))
		async def module_handler(event):
			global start_module
			start_module = True
			chat_id = event.chat_id
			await event.client.send_message(chat_id, "–º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω")

			payloads = [
				"[ü©∏] –õ–∏–±–∏–¥–Ω–æ —Å–æ—Å–µ—à—å [ü©∏]",
				"[ü©∏] –¢—ã —Å–ª–∞–±–∞–∫ [ü©∏]",
				"[ü©∏] –¢—ã –∂–µ –ø–æ–Ω–∏–º–∞–µ—à—å —á—Ç–æ —è –Ω–∞—á–Ω—É —â–∞—Å –ø—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–π —Ö—É–π —Å–ª–æ–≤–Ω–æ –Ω–æ–∂ —Ç–µ –≤ –≥–ª–∞–∑–Ω—ã–µ —è–±–ª–æ–∫–∏ [ü©∏]",
				"[ü©∏] –Ø –≤–Ω–∞—Ç—É—Ä–µ —â–∞ —Ç–µ –µ–±–ª–æ —Å–ª–æ–º–∞—é [ü©∏]",
				"[ü©∏] –¢—ã –Ω–µ –±–æ–ª–µ–µ —á–µ–º —Ö—É–µ—Å–æ—Å –Ω–∏—â–∏–π [ü©∏]",
				"[ü©∏] –Ø —â–∞—Å –≤—Å—É–Ω—É –∞—Ä–º–∞—Ç—É—Ä—É —Ç–µ –≤ –æ—á–µ–ª–∏—â–µ [ü©∏]",
				"[ü©∏] –ü—Ä–æ—Å–≤–µ—Ä–ª–∏–ª —Ç–µ –≥–æ–ª–æ–≤—É –∏ —Ç–∞–º –æ–ø–∞—Ä—ã—à–∏... [ü©∏]",
				"[ü©∏] –¢—ã –¥–∞–∂–µ –Ω–µ –ø—ã—Ç–∞–π—Å—è –¥–∞—Ç—å –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å –æ—Ç–ø–æ—Ä –º–Ω–µ [ü©∏]",
				"[ü©∏] –ù—É —Ç—ã –≤–Ω–∞—Ç—É—Ä–µ –≤–∞—â–µ —Å–ª–∞–±–∞–∫... [ü©∏]",
				"[ü©∏] –ù—É —Å–ª–æ–º–∞–ª —Ç–µ –µ–±–ª–∏—â–µ [ü©∏]",
				"[ü©∏] –¢—ã —É–µ–±–∏—â–µ –∂–∏—Ä–Ω–æ–µ [ü©∏]",
				"[ü©∏] –ù—É –ª–æ–º–∞—é —Ç–µ –µ–±–ª–∏—â–µ –ø–æ–∫–∞ —Ç—ã –≤—ã–ø–∏—Å—ã–≤–∞–µ—à—å —Å–≤–æ–π –º–∏–∑–µ—Ä) [ü©∏]",
				"[ü©∏] –ù—É —Ç—ã –∏ —Å–ª–∞–±—ã–π —Ö—É–µ—Å–æ—Å –∏ —Ö–∞—á –¥—ã—Ä—è–≤—ã–π [ü©∏]",
				"[ü©∏] –î–∞–π –æ—Ç–ø–æ—Ä–∞ —Ö–æ—Ç—å –∫–∞–∫–æ–≥–æ –Ω–∏–±—É–¥—å [ü©∏]",
				"[ü©∏] –¢—ã –∂–µ –ø–æ–Ω–∏–º–∞–µ—à—å —á—Ç–æ —è —Ç–∞–∫–∏–º –∫–∞–∫ —Ç—ã –ª–æ–º–∞—é –µ–±–ª–∏—â–µ –º–∏–≥–æ–º —Å–≤–æ–∏–º —Ö—É–µ–º [ü©∏]"
			]

			while start_module:
				random_payload = random.choice(payloads)
				await event.client.send_message(chat_id, random_payload)
				time.sleep(10)

		@self.client.on(events.NewMessage(pattern=r'\.stop_module'))
		async def stop_module_handler(event):
			global start_module
			chat_id = event.chat_id
			if start_module:
				start_module = False
				await event.client.send_message(chat_id, "–ú–æ–¥—É–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

		async def main():
           	# –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π ID –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
			me = await self.client.get_me()
			self.my_id = me.id
			print(f"{pink}[+] –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω{reset} ‚Äî –º–æ–π ID: {self.my_id}")

		self.client.start()
		self.client.loop.run_until_complete(main())
		self.client.run_until_disconnected()
